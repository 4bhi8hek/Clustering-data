{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/4bhi8hek/Clustering-data/blob/main/Clustering%20data\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import re\n",
        "from nltk.corpus import stopwords\n",
        "from nltk.stem import WordNetLemmatizer\n",
        "import nltk\n",
        "\n",
        "nltk.download('stopwords')\n",
        "nltk.download('wordnet')\n",
        "\n",
        "file_path = 'ATS Call.xlsx'\n",
        "df = pd.read_excel(file_path, sheet_name='Sheet1')\n",
        "\n",
        "df.columns = df.columns.str.strip()\n",
        "\n",
        "# Initialize stopwords and lemmatizer\n",
        "stop_words = set(stopwords.words('english'))\n",
        "lemmatizer = WordNetLemmatizer()\n",
        "\n",
        "\n",
        "def preprocess_text(text):\n",
        "    text = re.sub(r'\\W', ' ', str(text))  # special characters\n",
        "    text = re.sub(r'\\d+', ' ', text)  # numbers\n",
        "    text = text.lower()\n",
        "    # Remove stopwords and apply lemmatization\n",
        "    text = ' '.join([lemmatizer.lemmatize(word) for word in text.split() if word not in stop_words])\n",
        "    return text\n",
        "\n",
        "# Apply preprocessing\n",
        "df['cleaned_text'] = df['Text'].apply(preprocess_text)\n",
        "\n",
        "# Check the cleaned text\n",
        "print(df[['Text', 'cleaned_text']].head())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-jVTRK3v_hqn",
        "outputId": "f2a18eb9-3628-40ed-ec49-09a3f95e5315"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[nltk_data] Downloading package stopwords to /root/nltk_data...\n",
            "[nltk_data]   Unzipping corpora/stopwords.zip.\n",
            "[nltk_data] Downloading package wordnet to /root/nltk_data...\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                                                Text  \\\n",
            "0   1) providing adhoc support to Wheels emi .\\n2...   \n",
            "1   BAJAJ - Motor - Production - Proposal Error -...   \n",
            "2   BAJAJ API PREMIUM MISMATCH [CIBSMTRPC20240106...   \n",
            "3   BG Diff Reconciliation for BG  # 100010616, P...   \n",
            "4   cases stuck in an interim state. please check...   \n",
            "\n",
            "                                        cleaned_text  \n",
            "0  providing adhoc support wheel emi solving user...  \n",
            "1  bajaj motor production proposal error query id...  \n",
            "2  bajaj api premium mismatch cibsmtrpc gj rj err...  \n",
            "3       bg diff reconciliation bg pid _ revised reco  \n",
            "4  case stuck interim state please check move ter...  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uoTQZfNK3FAn",
        "outputId": "018b5e94-df9b-4508-de54-8f34ec16fe28"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                                        cleaned_text  \\\n",
            "0  providing adhoc support wheel emi solving user...   \n",
            "1  bajaj motor production proposal error query id...   \n",
            "2  bajaj api premium mismatch cibsmtrpc gj rj err...   \n",
            "3       bg diff reconciliation bg pid _ revised reco   \n",
            "4  case stuck interim state please check move ter...   \n",
            "\n",
            "                                          categories  \n",
            "0  {'Error_Message': False, 'Task_Action': False,...  \n",
            "1  {'Error_Message': True, 'Task_Action': False, ...  \n",
            "2  {'Error_Message': True, 'Task_Action': False, ...  \n",
            "3  {'Error_Message': False, 'Task_Action': False,...  \n",
            "4  {'Error_Message': False, 'Task_Action': True, ...  \n"
          ]
        }
      ],
      "source": [
        "def categorize_text(text):\n",
        "    categories = {\n",
        "        'Error_Message': False,\n",
        "        'Task_Action': False,\n",
        "        'Status_Update': False,\n",
        "        'Resolution_Solution': False,\n",
        "        'Date_Timestamp': False,\n",
        "        'Feedback': False,\n",
        "        'Query_Question': False,\n",
        "        'Instructions_Guidelines': False,\n",
        "        'Information_Update': False,\n",
        "        'Follow_Up_Request': False,\n",
        "        'Miscellaneous': False\n",
        "    }\n",
        "\n",
        "    error_keywords = r'\\b(error|fail|unable|issue|problem)\\b'\n",
        "    task_keywords = r'\\b(restart|check|update|configure|install|action)\\b'\n",
        "    status_keywords = r'\\b(complete|pending|in progress|status|awaiting)\\b'\n",
        "    resolution_keywords = r'\\b(resolved|fixed|patched|solution|implemented)\\b'\n",
        "    date_keywords = r'\\b(yesterday|today|on|ago|nov|dec|jan)\\b'\n",
        "    feedback_keywords = r'\\b(feedback|suggestion|recommend|improve|positive|negative)\\b'\n",
        "    query_keywords = r'\\b(how|what|why|when|who|query|question)\\b'\n",
        "    instruction_keywords = r'\\b(follow|step|guideline|instruction|procedure|manual)\\b'\n",
        "    information_keywords = r'\\b(update|information|note|log|details|alert)\\b'\n",
        "    follow_up_keywords = r'\\b(follow up|check on|remind|any update|status on)\\b'\n",
        "\n",
        "    text_lower = text.lower()\n",
        "\n",
        "    if re.search(error_keywords, text_lower):\n",
        "        categories['Error_Message'] = True\n",
        "    if re.search(task_keywords, text_lower):\n",
        "        categories['Task_Action'] = True\n",
        "    if re.search(status_keywords, text_lower):\n",
        "        categories['Status_Update'] = True\n",
        "    if re.search(resolution_keywords, text_lower):\n",
        "        categories['Resolution_Solution'] = True\n",
        "    if re.search(date_keywords, text_lower):\n",
        "        categories['Date_Timestamp'] = True\n",
        "    if re.search(feedback_keywords, text_lower):\n",
        "        categories['Feedback'] = True\n",
        "    if re.search(query_keywords, text_lower):\n",
        "        categories['Query_Question'] = True\n",
        "    if re.search(instruction_keywords, text_lower):\n",
        "        categories['Instructions_Guidelines'] = True\n",
        "    if re.search(information_keywords, text_lower):\n",
        "        categories['Information_Update'] = True\n",
        "    if re.search(follow_up_keywords, text_lower):\n",
        "        categories['Follow_Up_Request'] = True\n",
        "\n",
        "    if not any(categories.values()):\n",
        "        categories['Miscellaneous'] = True\n",
        "\n",
        "    return categories\n",
        "\n",
        "df['categories'] = df['cleaned_text'].apply(categorize_text)\n",
        "\n",
        "print(df[['cleaned_text', 'categories']].head())\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "id": "6Lge0hbX3PD5"
      },
      "outputs": [],
      "source": [
        "\n",
        "category_columns = pd.json_normalize(df['categories'])\n",
        "\n",
        "df = pd.concat([df, category_columns], axis=1)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "prc8wgUI3S_k",
        "outputId": "672dbbdc-ace3-4b6c-8d1e-656adf1cb51e"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Miscellaneous              908\n",
            "Error_Message              476\n",
            "Task_Action                 74\n",
            "Information_Update          64\n",
            "Status_Update               63\n",
            "Query_Question              45\n",
            "Date_Timestamp              41\n",
            "Instructions_Guidelines     22\n",
            "Resolution_Solution         18\n",
            "Feedback                     5\n",
            "Follow_Up_Request            0\n",
            "dtype: int64\n"
          ]
        }
      ],
      "source": [
        "# Count the occurrences of each category (True values)\n",
        "category_summary = category_columns.sum()\n",
        "\n",
        "# Sort the categories by their frequency\n",
        "category_summary = category_summary.sort_values(ascending=False)\n",
        "\n",
        "# Print category distribution\n",
        "print(category_summary)\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Remove all rows with any null values\n",
        "df_cleaned = df.dropna()\n",
        "\n",
        "# Print the cleaned DataFrame\n",
        "print(df_cleaned)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BbDCDf3_nuyF",
        "outputId": "fab47d8d-8224-41ba-8b23-99a77dfa3fa9"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                                                   Text  \\\n",
            "0      1) providing adhoc support to Wheels emi .\\n2...   \n",
            "1      BAJAJ - Motor - Production - Proposal Error -...   \n",
            "2      BAJAJ API PREMIUM MISMATCH [CIBSMTRPC20240106...   \n",
            "3      BG Diff Reconciliation for BG  # 100010616, P...   \n",
            "4      cases stuck in an interim state. please check...   \n",
            "...                                                 ...   \n",
            "1572  WSR suggestions implementation on UAT and shar...   \n",
            "1573                            Year End Support.\\n\\n\\n   \n",
            "1574  Your Issue No. :58355628  -  NCB recovery Phys...   \n",
            "1575  Zopper<>BAGIC : production issue,\\n Production...   \n",
            "1576  Zykr CSAT meeting.\\nCare angels requirment dis...   \n",
            "\n",
            "                                           cleaned_text  \\\n",
            "0     providing adhoc support wheel emi solving user...   \n",
            "1     bajaj motor production proposal error query id...   \n",
            "2     bajaj api premium mismatch cibsmtrpc gj rj err...   \n",
            "3          bg diff reconciliation bg pid _ revised reco   \n",
            "4     case stuck interim state please check move ter...   \n",
            "...                                                 ...   \n",
            "1572  wsr suggestion implementation uat sharing sugg...   \n",
            "1573                                   year end support   \n",
            "1574  issue ncb recovery physical digital intimation...   \n",
            "1575  zopper bagic production issue production renew...   \n",
            "1576  zykr csat meeting care angel requirment discus...   \n",
            "\n",
            "                                             categories  Error_Message  \\\n",
            "0     {'Error_Message': False, 'Task_Action': False,...          False   \n",
            "1     {'Error_Message': True, 'Task_Action': False, ...           True   \n",
            "2     {'Error_Message': True, 'Task_Action': False, ...           True   \n",
            "3     {'Error_Message': False, 'Task_Action': False,...          False   \n",
            "4     {'Error_Message': False, 'Task_Action': True, ...          False   \n",
            "...                                                 ...            ...   \n",
            "1572  {'Error_Message': False, 'Task_Action': False,...          False   \n",
            "1573  {'Error_Message': False, 'Task_Action': False,...          False   \n",
            "1574  {'Error_Message': True, 'Task_Action': False, ...           True   \n",
            "1575  {'Error_Message': True, 'Task_Action': False, ...           True   \n",
            "1576  {'Error_Message': False, 'Task_Action': False,...          False   \n",
            "\n",
            "      Task_Action  Status_Update  Resolution_Solution  Date_Timestamp  \\\n",
            "0           False          False                False           False   \n",
            "1           False          False                False           False   \n",
            "2           False          False                False           False   \n",
            "3           False          False                False           False   \n",
            "4            True          False                False           False   \n",
            "...           ...            ...                  ...             ...   \n",
            "1572        False          False                False           False   \n",
            "1573        False          False                False           False   \n",
            "1574        False          False                False           False   \n",
            "1575        False          False                False           False   \n",
            "1576        False          False                False           False   \n",
            "\n",
            "      Feedback  Query_Question  Instructions_Guidelines  Information_Update  \\\n",
            "0        False            True                    False               False   \n",
            "1        False            True                    False               False   \n",
            "2        False           False                    False               False   \n",
            "3        False           False                    False               False   \n",
            "4        False           False                    False               False   \n",
            "...        ...             ...                      ...                 ...   \n",
            "1572      True           False                    False               False   \n",
            "1573     False           False                    False               False   \n",
            "1574     False           False                    False               False   \n",
            "1575     False           False                    False               False   \n",
            "1576     False           False                    False               False   \n",
            "\n",
            "      Follow_Up_Request  Miscellaneous  \n",
            "0                 False          False  \n",
            "1                 False          False  \n",
            "2                 False          False  \n",
            "3                 False           True  \n",
            "4                 False          False  \n",
            "...                 ...            ...  \n",
            "1572              False          False  \n",
            "1573              False           True  \n",
            "1574              False          False  \n",
            "1575              False          False  \n",
            "1576              False           True  \n",
            "\n",
            "[1577 rows x 14 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Remove rows where 'cleaned_text' or 'categories' is NaN\n",
        "df_cleaned = df.dropna(subset=['cleaned_text', 'categories'])\n",
        "\n",
        "# Print the cleaned DataFrame\n",
        "print(df_cleaned)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NBY9Xo-WDc2t",
        "outputId": "e9d6ec35-4939-45d3-8b7b-d196d0e74e02"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                                                   Text  \\\n",
            "0      1) providing adhoc support to Wheels emi .\\n2...   \n",
            "1      BAJAJ - Motor - Production - Proposal Error -...   \n",
            "2      BAJAJ API PREMIUM MISMATCH [CIBSMTRPC20240106...   \n",
            "3      BG Diff Reconciliation for BG  # 100010616, P...   \n",
            "4      cases stuck in an interim state. please check...   \n",
            "...                                                 ...   \n",
            "1572  WSR suggestions implementation on UAT and shar...   \n",
            "1573                            Year End Support.\\n\\n\\n   \n",
            "1574  Your Issue No. :58355628  -  NCB recovery Phys...   \n",
            "1575  Zopper<>BAGIC : production issue,\\n Production...   \n",
            "1576  Zykr CSAT meeting.\\nCare angels requirment dis...   \n",
            "\n",
            "                                           cleaned_text  \\\n",
            "0     providing adhoc support wheel emi solving user...   \n",
            "1     bajaj motor production proposal error query id...   \n",
            "2     bajaj api premium mismatch cibsmtrpc gj rj err...   \n",
            "3          bg diff reconciliation bg pid _ revised reco   \n",
            "4     case stuck interim state please check move ter...   \n",
            "...                                                 ...   \n",
            "1572  wsr suggestion implementation uat sharing sugg...   \n",
            "1573                                   year end support   \n",
            "1574  issue ncb recovery physical digital intimation...   \n",
            "1575  zopper bagic production issue production renew...   \n",
            "1576  zykr csat meeting care angel requirment discus...   \n",
            "\n",
            "                                             categories  Error_Message  \\\n",
            "0     {'Error_Message': False, 'Task_Action': False,...          False   \n",
            "1     {'Error_Message': True, 'Task_Action': False, ...           True   \n",
            "2     {'Error_Message': True, 'Task_Action': False, ...           True   \n",
            "3     {'Error_Message': False, 'Task_Action': False,...          False   \n",
            "4     {'Error_Message': False, 'Task_Action': True, ...          False   \n",
            "...                                                 ...            ...   \n",
            "1572  {'Error_Message': False, 'Task_Action': False,...          False   \n",
            "1573  {'Error_Message': False, 'Task_Action': False,...          False   \n",
            "1574  {'Error_Message': True, 'Task_Action': False, ...           True   \n",
            "1575  {'Error_Message': True, 'Task_Action': False, ...           True   \n",
            "1576  {'Error_Message': False, 'Task_Action': False,...          False   \n",
            "\n",
            "      Task_Action  Status_Update  Resolution_Solution  Date_Timestamp  \\\n",
            "0           False          False                False           False   \n",
            "1           False          False                False           False   \n",
            "2           False          False                False           False   \n",
            "3           False          False                False           False   \n",
            "4            True          False                False           False   \n",
            "...           ...            ...                  ...             ...   \n",
            "1572        False          False                False           False   \n",
            "1573        False          False                False           False   \n",
            "1574        False          False                False           False   \n",
            "1575        False          False                False           False   \n",
            "1576        False          False                False           False   \n",
            "\n",
            "      Feedback  Query_Question  Instructions_Guidelines  Information_Update  \\\n",
            "0        False            True                    False               False   \n",
            "1        False            True                    False               False   \n",
            "2        False           False                    False               False   \n",
            "3        False           False                    False               False   \n",
            "4        False           False                    False               False   \n",
            "...        ...             ...                      ...                 ...   \n",
            "1572      True           False                    False               False   \n",
            "1573     False           False                    False               False   \n",
            "1574     False           False                    False               False   \n",
            "1575     False           False                    False               False   \n",
            "1576     False           False                    False               False   \n",
            "\n",
            "      Follow_Up_Request  Miscellaneous  \n",
            "0                 False          False  \n",
            "1                 False          False  \n",
            "2                 False          False  \n",
            "3                 False           True  \n",
            "4                 False          False  \n",
            "...                 ...            ...  \n",
            "1572              False          False  \n",
            "1573              False           True  \n",
            "1574              False          False  \n",
            "1575              False          False  \n",
            "1576              False           True  \n",
            "\n",
            "[1577 rows x 14 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Remove columns with any null values\n",
        "df_cleaned = df.dropna(axis=1)\n",
        "\n",
        "# Print the cleaned DataFrame\n",
        "print(df_cleaned)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "w3mrAic7Di9o",
        "outputId": "24cbcade-8cf2-4e5a-e8e2-30dfbab8b556"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                                                   Text  \\\n",
            "0      1) providing adhoc support to Wheels emi .\\n2...   \n",
            "1      BAJAJ - Motor - Production - Proposal Error -...   \n",
            "2      BAJAJ API PREMIUM MISMATCH [CIBSMTRPC20240106...   \n",
            "3      BG Diff Reconciliation for BG  # 100010616, P...   \n",
            "4      cases stuck in an interim state. please check...   \n",
            "...                                                 ...   \n",
            "1572  WSR suggestions implementation on UAT and shar...   \n",
            "1573                            Year End Support.\\n\\n\\n   \n",
            "1574  Your Issue No. :58355628  -  NCB recovery Phys...   \n",
            "1575  Zopper<>BAGIC : production issue,\\n Production...   \n",
            "1576  Zykr CSAT meeting.\\nCare angels requirment dis...   \n",
            "\n",
            "                                           cleaned_text  \\\n",
            "0     providing adhoc support wheel emi solving user...   \n",
            "1     bajaj motor production proposal error query id...   \n",
            "2     bajaj api premium mismatch cibsmtrpc gj rj err...   \n",
            "3          bg diff reconciliation bg pid _ revised reco   \n",
            "4     case stuck interim state please check move ter...   \n",
            "...                                                 ...   \n",
            "1572  wsr suggestion implementation uat sharing sugg...   \n",
            "1573                                   year end support   \n",
            "1574  issue ncb recovery physical digital intimation...   \n",
            "1575  zopper bagic production issue production renew...   \n",
            "1576  zykr csat meeting care angel requirment discus...   \n",
            "\n",
            "                                             categories  Error_Message  \\\n",
            "0     {'Error_Message': False, 'Task_Action': False,...          False   \n",
            "1     {'Error_Message': True, 'Task_Action': False, ...           True   \n",
            "2     {'Error_Message': True, 'Task_Action': False, ...           True   \n",
            "3     {'Error_Message': False, 'Task_Action': False,...          False   \n",
            "4     {'Error_Message': False, 'Task_Action': True, ...          False   \n",
            "...                                                 ...            ...   \n",
            "1572  {'Error_Message': False, 'Task_Action': False,...          False   \n",
            "1573  {'Error_Message': False, 'Task_Action': False,...          False   \n",
            "1574  {'Error_Message': True, 'Task_Action': False, ...           True   \n",
            "1575  {'Error_Message': True, 'Task_Action': False, ...           True   \n",
            "1576  {'Error_Message': False, 'Task_Action': False,...          False   \n",
            "\n",
            "      Task_Action  Status_Update  Resolution_Solution  Date_Timestamp  \\\n",
            "0           False          False                False           False   \n",
            "1           False          False                False           False   \n",
            "2           False          False                False           False   \n",
            "3           False          False                False           False   \n",
            "4            True          False                False           False   \n",
            "...           ...            ...                  ...             ...   \n",
            "1572        False          False                False           False   \n",
            "1573        False          False                False           False   \n",
            "1574        False          False                False           False   \n",
            "1575        False          False                False           False   \n",
            "1576        False          False                False           False   \n",
            "\n",
            "      Feedback  Query_Question  Instructions_Guidelines  Information_Update  \\\n",
            "0        False            True                    False               False   \n",
            "1        False            True                    False               False   \n",
            "2        False           False                    False               False   \n",
            "3        False           False                    False               False   \n",
            "4        False           False                    False               False   \n",
            "...        ...             ...                      ...                 ...   \n",
            "1572      True           False                    False               False   \n",
            "1573     False           False                    False               False   \n",
            "1574     False           False                    False               False   \n",
            "1575     False           False                    False               False   \n",
            "1576     False           False                    False               False   \n",
            "\n",
            "      Follow_Up_Request  Miscellaneous  \n",
            "0                 False          False  \n",
            "1                 False          False  \n",
            "2                 False          False  \n",
            "3                 False           True  \n",
            "4                 False          False  \n",
            "...                 ...            ...  \n",
            "1572              False          False  \n",
            "1573              False           True  \n",
            "1574              False          False  \n",
            "1575              False          False  \n",
            "1576              False           True  \n",
            "\n",
            "[1577 rows x 14 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 674
        },
        "id": "rdO5Legv3XxG",
        "outputId": "27553633-54f2-4187-ac30-2a134dcdca97"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Plotting the distribution of categories\n",
        "category_summary.plot(kind='bar', figsize=(10, 6), color='skyblue')\n",
        "plt.title('Category Distribution')\n",
        "plt.xlabel('Category')\n",
        "plt.ylabel('Frequency')\n",
        "plt.xticks(rotation=45)\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Plotting the distribution of categories as a pie chart\n",
        "category_summary.plot(kind='pie', figsize=(8, 8), autopct='%1.1f%%', colors=['skyblue', 'lightgreen', 'lightcoral', 'lightskyblue', 'lightpink', 'lightgoldenrodyellow', 'lightseagreen'])\n",
        "plt.title('Category Distribution')\n",
        " # Remove the y-label for a cleaner look\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 675
        },
        "id": "eB6Q3ot-oMWW",
        "outputId": "e2470bb2-3083-40e2-f215-62fea818ebec"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Count the number of null values in each column\n",
        "null_counts = df.isnull().sum()\n",
        "\n",
        "# Filter out columns where all values are non-null\n",
        "null_counts = null_counts[null_counts > 0]  # Only keep columns with null values\n",
        "\n",
        "# Check for any null values in the DataFrame\n",
        "print(null_counts)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ltPhf4gKEpKv",
        "outputId": "7c28cc3f-8a97-45e7-d54f-526cc7f1c14a"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Series([], dtype: int64)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Plotting null value distribution as a pie chart\n",
        "null_counts.plot(kind='pie', figsize=(8, 8), autopct='%1.1f%%', colors=['lightcoral', 'lightblue'])\n",
        "plt.title('Null Value Distribution')\n",
        "plt.ylabel('')  # Remove the y-label for a cleaner look\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 675
        },
        "id": "6ZqZw0hVEtSI",
        "outputId": "f9caef1a-90f4-4aa5-e858-719ae6b44975"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Save the cleaned DataFrame to a new Excel file\n",
        "cleaned_file_path = 'cleaned_data.xlsx'\n",
        "df.to_excel(cleaned_file_path, index=False, sheet_name='df_cleaned')\n"
      ],
      "metadata": {
        "id": "Ui8AEXPkJEGD"
      },
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Save the DataFrame with 'cleaned_text' and 'categories' to a new Excel file\n",
        "df.to_excel('categorized_data.xlsx', index=False, sheet_name='CategorizedData')\n"
      ],
      "metadata": {
        "id": "mBJtopgaJXnU"
      },
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Save the DataFrame with 'cleaned_text' and 'categories' to a new CSV file\n",
        "print(df_cleaned)\n",
        "df_cleaned.to_excel('categorized_data1.xlsx', index=False)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Y-_Hc4B0J9KY",
        "outputId": "fd58d5b9-9b93-486f-acbe-1bdf31329c1c"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                                                   Text  \\\n",
            "0      1) providing adhoc support to Wheels emi .\\n2...   \n",
            "1      BAJAJ - Motor - Production - Proposal Error -...   \n",
            "2      BAJAJ API PREMIUM MISMATCH [CIBSMTRPC20240106...   \n",
            "3      BG Diff Reconciliation for BG  # 100010616, P...   \n",
            "4      cases stuck in an interim state. please check...   \n",
            "...                                                 ...   \n",
            "1572  WSR suggestions implementation on UAT and shar...   \n",
            "1573                            Year End Support.\\n\\n\\n   \n",
            "1574  Your Issue No. :58355628  -  NCB recovery Phys...   \n",
            "1575  Zopper<>BAGIC : production issue,\\n Production...   \n",
            "1576  Zykr CSAT meeting.\\nCare angels requirment dis...   \n",
            "\n",
            "                                           cleaned_text  \\\n",
            "0     providing adhoc support wheel emi solving user...   \n",
            "1     bajaj motor production proposal error query id...   \n",
            "2     bajaj api premium mismatch cibsmtrpc gj rj err...   \n",
            "3          bg diff reconciliation bg pid _ revised reco   \n",
            "4     case stuck interim state please check move ter...   \n",
            "...                                                 ...   \n",
            "1572  wsr suggestion implementation uat sharing sugg...   \n",
            "1573                                   year end support   \n",
            "1574  issue ncb recovery physical digital intimation...   \n",
            "1575  zopper bagic production issue production renew...   \n",
            "1576  zykr csat meeting care angel requirment discus...   \n",
            "\n",
            "                                             categories  Error_Message  \\\n",
            "0     {'Error_Message': False, 'Task_Action': False,...          False   \n",
            "1     {'Error_Message': True, 'Task_Action': False, ...           True   \n",
            "2     {'Error_Message': True, 'Task_Action': False, ...           True   \n",
            "3     {'Error_Message': False, 'Task_Action': False,...          False   \n",
            "4     {'Error_Message': False, 'Task_Action': True, ...          False   \n",
            "...                                                 ...            ...   \n",
            "1572  {'Error_Message': False, 'Task_Action': False,...          False   \n",
            "1573  {'Error_Message': False, 'Task_Action': False,...          False   \n",
            "1574  {'Error_Message': True, 'Task_Action': False, ...           True   \n",
            "1575  {'Error_Message': True, 'Task_Action': False, ...           True   \n",
            "1576  {'Error_Message': False, 'Task_Action': False,...          False   \n",
            "\n",
            "      Task_Action  Status_Update  Resolution_Solution  Date_Timestamp  \\\n",
            "0           False          False                False           False   \n",
            "1           False          False                False           False   \n",
            "2           False          False                False           False   \n",
            "3           False          False                False           False   \n",
            "4            True          False                False           False   \n",
            "...           ...            ...                  ...             ...   \n",
            "1572        False          False                False           False   \n",
            "1573        False          False                False           False   \n",
            "1574        False          False                False           False   \n",
            "1575        False          False                False           False   \n",
            "1576        False          False                False           False   \n",
            "\n",
            "      Feedback  Query_Question  Instructions_Guidelines  Information_Update  \\\n",
            "0        False            True                    False               False   \n",
            "1        False            True                    False               False   \n",
            "2        False           False                    False               False   \n",
            "3        False           False                    False               False   \n",
            "4        False           False                    False               False   \n",
            "...        ...             ...                      ...                 ...   \n",
            "1572      True           False                    False               False   \n",
            "1573     False           False                    False               False   \n",
            "1574     False           False                    False               False   \n",
            "1575     False           False                    False               False   \n",
            "1576     False           False                    False               False   \n",
            "\n",
            "      Follow_Up_Request  Miscellaneous  \n",
            "0                 False          False  \n",
            "1                 False          False  \n",
            "2                 False          False  \n",
            "3                 False           True  \n",
            "4                 False          False  \n",
            "...                 ...            ...  \n",
            "1572              False          False  \n",
            "1573              False           True  \n",
            "1574              False          False  \n",
            "1575              False          False  \n",
            "1576              False           True  \n",
            "\n",
            "[1577 rows x 14 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from sklearn.cluster import KMeans\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "\n",
        "# Load the cleaned data from the Excel file\n",
        "file_path = 'categorized_data1.xlsx'\n",
        "df = pd.read_excel(file_path, sheet_name='Sheet1')\n",
        "\n",
        "# Convert 'categories' dictionary into separate columns\n",
        "categories_df = pd.json_normalize(df['categories'])\n",
        "\n",
        "# Merge the original data with the new binary columns\n",
        "df = df.join(categories_df)\n",
        "\n",
        "# Now, 'df' contains the cleaned text and the binary columns for each category.\n",
        "print(df.head())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DtV3iAqgKsBf",
        "outputId": "61db10ea-62f2-4289-dde9-a7d0bdb4000a"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                                                Text  \\\n",
            "0   1) providing adhoc support to Wheels emi .\\n2...   \n",
            "1   BAJAJ - Motor - Production - Proposal Error -...   \n",
            "2   BAJAJ API PREMIUM MISMATCH [CIBSMTRPC20240106...   \n",
            "3   BG Diff Reconciliation for BG  # 100010616, P...   \n",
            "4   cases stuck in an interim state. please check...   \n",
            "\n",
            "                                        cleaned_text  \\\n",
            "0  providing adhoc support wheel emi solving user...   \n",
            "1  bajaj motor production proposal error query id...   \n",
            "2  bajaj api premium mismatch cibsmtrpc gj rj err...   \n",
            "3       bg diff reconciliation bg pid _ revised reco   \n",
            "4  case stuck interim state please check move ter...   \n",
            "\n",
            "                                          categories  Error_Message  \\\n",
            "0  {'Error_Message': False, 'Task_Action': False,...          False   \n",
            "1  {'Error_Message': True, 'Task_Action': False, ...           True   \n",
            "2  {'Error_Message': True, 'Task_Action': False, ...           True   \n",
            "3  {'Error_Message': False, 'Task_Action': False,...          False   \n",
            "4  {'Error_Message': False, 'Task_Action': True, ...          False   \n",
            "\n",
            "   Task_Action  Status_Update  Resolution_Solution  Date_Timestamp  Feedback  \\\n",
            "0        False          False                False           False     False   \n",
            "1        False          False                False           False     False   \n",
            "2        False          False                False           False     False   \n",
            "3        False          False                False           False     False   \n",
            "4         True          False                False           False     False   \n",
            "\n",
            "   Query_Question  Instructions_Guidelines  Information_Update  \\\n",
            "0            True                    False               False   \n",
            "1            True                    False               False   \n",
            "2           False                    False               False   \n",
            "3           False                    False               False   \n",
            "4           False                    False               False   \n",
            "\n",
            "   Follow_Up_Request  Miscellaneous  \n",
            "0              False          False  \n",
            "1              False          False  \n",
            "2              False          False  \n",
            "3              False           True  \n",
            "4              False          False  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "categories_df = categories_df.astype(int)  # Convert True/False to 1/0\n"
      ],
      "metadata": {
        "id": "7GmUKdWYHHBl"
      },
      "execution_count": 21,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(categories_df.info())  # Check data types and non-null counts\n",
        "print(categories_df.head())  # View the first few rows\n",
        "print(categories_df.shape)   # Check the shape of the DataFrame\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Y1zm-XESHUPi",
        "outputId": "6813c5dc-dcef-4479-e1bc-b003a0a699d3"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 1577 entries, 0 to 1576\n",
            "Empty DataFrame\n",
            "None\n",
            "Empty DataFrame\n",
            "Columns: []\n",
            "Index: [0, 1, 2, 3, 4]\n",
            "(1577, 0)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# New Section"
      ],
      "metadata": {
        "id": "_z6MyCh4EQ2k"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Convert boolean columns to integers\n",
        "binary_features = df.iloc[:, 3:]  # Select only the binary columns\n",
        "binary_features = binary_features.astype(int)\n"
      ],
      "metadata": {
        "id": "Nrn6q4ZrIZru"
      },
      "execution_count": 23,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.cluster import KMeans\n",
        "\n",
        "# Define the number of clusters\n",
        "n_clusters = 4\n",
        "\n",
        "# Initialize and fit KMeans\n",
        "kmeans = KMeans(n_clusters=n_clusters, random_state=42)\n",
        "df['Cluster'] = kmeans.fit_predict(binary_features)\n",
        "\n",
        "# Check results\n",
        "print(df[['cleaned_text', 'Cluster']].head())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "z7fCC6GkIdQX",
        "outputId": "c5dd2d19-88d8-4bc5-ef56-e72f1ba94709"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                                        cleaned_text  Cluster\n",
            "0  providing adhoc support wheel emi solving user...        2\n",
            "1  bajaj motor production proposal error query id...        0\n",
            "2  bajaj api premium mismatch cibsmtrpc gj rj err...        0\n",
            "3       bg diff reconciliation bg pid _ revised reco        1\n",
            "4  case stuck interim state please check move ter...        2\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Save the results to a new Excel file\n",
        "df.to_excel('clustered_data.xlsx', index=False, sheet_name='ClusteredData')\n"
      ],
      "metadata": {
        "id": "s4mkSmmzIhfg"
      },
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(df['Cluster'].value_counts())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yZ-QFJtbIvEO",
        "outputId": "8bd7551a-eb79-4de9-e8ca-9b752d163ab0"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Cluster\n",
            "1    908\n",
            "0    474\n",
            "2    143\n",
            "3     52\n",
            "Name: count, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for cluster in df['Cluster'].unique():\n",
        "    print(f\"Cluster {cluster} examples:\")\n",
        "    print(df[df['Cluster'] == cluster][['cleaned_text']].head())\n",
        "    print(\"\\n\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-ey6EfGmI1B_",
        "outputId": "1c51a3da-0308-4653-da93-fc3f471a777f"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Cluster 2 examples:\n",
            "                                         cleaned_text\n",
            "0   providing adhoc support wheel emi solving user...\n",
            "4   case stuck interim state please check move ter...\n",
            "40  providing adhoc support bandhan bank portal so...\n",
            "41  providing adhoc support wheel emi solving user...\n",
            "42  providing adhoc support bandhan bank portal so...\n",
            "\n",
            "\n",
            "Cluster 0 examples:\n",
            "                                        cleaned_text\n",
            "1  bajaj motor production proposal error query id...\n",
            "2  bajaj api premium mismatch cibsmtrpc gj rj err...\n",
            "6            error ovd doc upload failing production\n",
            "7  error payment mh g tz error two wheeler renewa...\n",
            "8  error proposal response turtlemint fw bajaj pr...\n",
            "\n",
            "\n",
            "Cluster 1 examples:\n",
            "                                         cleaned_text\n",
            "3        bg diff reconciliation bg pid _ revised reco\n",
            "5   cyber insurance product standalone basis group...\n",
            "9     extend grace period day post expiry renewal api\n",
            "11                                    float statement\n",
            "12  high premium amount quotation bajaj smc quicki...\n",
            "\n",
            "\n",
            "Cluster 3 examples:\n",
            "                                          cleaned_text\n",
            "269  check maruti_pendig case debug issue case pend...\n",
            "271                        check mids pending proposal\n",
            "272  check opus motor package debug policy issuance...\n",
            "273           check suzuki pending case new geog cover\n",
            "275  checked data loading executed failed job check...\n",
            "\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "from sklearn.decomposition import PCA\n",
        "\n",
        "# Reduce dimensions for visualization\n",
        "pca = PCA(n_components=2)\n",
        "reduced_data = pca.fit_transform(binary_features)\n",
        "\n",
        "# Plot clusters\n",
        "plt.scatter(reduced_data[:, 0], reduced_data[:, 1], c=df['Cluster'], cmap='viridis', s=10)\n",
        "plt.title(\"Cluster Visualization\")\n",
        "plt.xlabel(\"PCA Feature 1\")\n",
        "plt.ylabel(\"PCA Feature 2\")\n",
        "plt.colorbar(label='Cluster')\n",
        "plt.show()\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "2Ngwu84-I57N",
        "outputId": "0f2d3cdb-ecb8-455c-fe2c-ab5adeb40a0c"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "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tfL58+cDADp37lym+InIuNhzRFRIzZo1sWnTJvTu3Rt16tRB//79Ua9ePeTm5uLEiRPYvn17qe9S69ChA6pXr47Bgwfjk08+gZWVFVavXg03NzckJCSo6q1btw5ff/01unfvjpo1a+LRo0dYsWIF5HK56heqvb096tati61bt+L555+Hq6sr6tWrh3r16mHJkiVo2bIl6tevj4iICPj7+yM5ORnR0dG4fft2mfYCKo1EIsGbb76JWbNmAQCmTZv2zGuuXr2K9u3bo1evXqhbty6sra2xa9cuJCcno0+fPqp6Q4YMwXvvvYcePXrglVdewR9//IGffvqpSG9Qly5dMG3aNAwaNAghISG4cOECNm7cqOo508SHH36Ie/fuYcyYMdiyZYvauQYNGqBBgwbo0qULdu7cie7du6Nz586Ij4/HsmXLULduXbWhztK+L09r2LAhBgwYgOXLlyM1NRVt2rTBqVOnsG7dOnTr1g0vv/yyxs9CREZg0rVyROXU1atXRUREhPD19RW2trbCyclJtGjRQixatEht+fzTy8+FEOLs2bMiKChI2NraiurVq4v58+cXWcp/7tw50bdvX1G9enUhk8mEu7u76NKlizhz5oxaWydOnBBNmjQRtra2RZaPX79+XfTv3194enoKGxsbUbVqVdGlSxexY8cOVZ2C+5a2ZUBJLl26JAAImUwmHj58WOT800vo79+/L4YPHy5q164tHB0dhbOzswgKChLbtm1Tu06hUIixY8eKKlWqCAcHBxEWFibi4uKKXco/evRo4eXlJezt7UWLFi1EdHS0aNOmjWjTpk2JcQhRdEl9mzZtBIBij4KvqVKpFLNmzRI1atQQMplMNG7cWOzdu1cMGDBA1KhRQ+0ZSvq+FLeFQF5enpg6darw8/MTNjY2wsfHR4wfP17tz5EQT/4sde7cucjX+ennJSLDkwjBmX5EREREBTjniIiIiKgQJkdEREREhTA5IiIiIiqEyRERERHpxdKlS9GgQQPI5XLI5XIEBwfjxx9/LPWa7du3o3bt2rCzs0P9+vVVr90xJSZHREREpBfVqlXD7NmzcfbsWZw5cwbt2rVD165dcenSpWLrnzhxAn379sXgwYNx/vx5dOvWDd26ddPpTQX6wNVqREREZDCurq6YM2cOBg8eXORc7969kZmZib1796rKmjdvjkaNGmHZsmXG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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for cluster in df['Cluster'].unique():\n",
        "    print(f\"Cluster {cluster} statistics:\")\n",
        "    print(df[df['Cluster'] == cluster].iloc[:, 3:].mean())  # Mean of binary features\n",
        "    print(\"\\n\")\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TWV1aYo8I_ee",
        "outputId": "adc020aa-4c8a-4db7-fa74-feab779f1a41"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Cluster 2 statistics:\n",
            "Error_Message              0.000000\n",
            "Task_Action                0.251748\n",
            "Status_Update              0.000000\n",
            "Resolution_Solution        0.048951\n",
            "Date_Timestamp             0.244755\n",
            "Feedback                   0.027972\n",
            "Query_Question             0.272727\n",
            "Instructions_Guidelines    0.111888\n",
            "Information_Update         0.202797\n",
            "Follow_Up_Request          0.000000\n",
            "Miscellaneous              0.000000\n",
            "Cluster                    2.000000\n",
            "dtype: float64\n",
            "\n",
            "\n",
            "Cluster 0 statistics:\n",
            "Error_Message              1.000000\n",
            "Task_Action                0.052743\n",
            "Status_Update              0.023207\n",
            "Resolution_Solution        0.021097\n",
            "Date_Timestamp             0.006329\n",
            "Feedback                   0.000000\n",
            "Query_Question             0.006329\n",
            "Instructions_Guidelines    0.010549\n",
            "Information_Update         0.065401\n",
            "Follow_Up_Request          0.000000\n",
            "Miscellaneous              0.000000\n",
            "Cluster                    0.000000\n",
            "dtype: float64\n",
            "\n",
            "\n",
            "Cluster 1 statistics:\n",
            "Error_Message              0.0\n",
            "Task_Action                0.0\n",
            "Status_Update              0.0\n",
            "Resolution_Solution        0.0\n",
            "Date_Timestamp             0.0\n",
            "Feedback                   0.0\n",
            "Query_Question             0.0\n",
            "Instructions_Guidelines    0.0\n",
            "Information_Update         0.0\n",
            "Follow_Up_Request          0.0\n",
            "Miscellaneous              1.0\n",
            "Cluster                    1.0\n",
            "dtype: float64\n",
            "\n",
            "\n",
            "Cluster 3 statistics:\n",
            "Error_Message              0.038462\n",
            "Task_Action                0.250000\n",
            "Status_Update              1.000000\n",
            "Resolution_Solution        0.019231\n",
            "Date_Timestamp             0.057692\n",
            "Feedback                   0.019231\n",
            "Query_Question             0.057692\n",
            "Instructions_Guidelines    0.019231\n",
            "Information_Update         0.076923\n",
            "Follow_Up_Request          0.000000\n",
            "Miscellaneous              0.000000\n",
            "Cluster                    3.000000\n",
            "dtype: float64\n",
            "\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "cluster_labels = {0: \"Error Cluster\", 1: \"Task Cluster\", 2: \"Query Cluster\", 3: \"Miscellaneous\"}\n",
        "df['Cluster_Label'] = df['Cluster'].map(cluster_labels)\n",
        "print(df[['cleaned_text', 'Cluster_Label']].head())\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PB-OeUOLJHDu",
        "outputId": "9eebf26f-38f5-4589-e14f-cc14ed0607e0"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                                        cleaned_text  Cluster_Label\n",
            "0  providing adhoc support wheel emi solving user...  Query Cluster\n",
            "1  bajaj motor production proposal error query id...  Error Cluster\n",
            "2  bajaj api premium mismatch cibsmtrpc gj rj err...  Error Cluster\n",
            "3       bg diff reconciliation bg pid _ revised reco   Task Cluster\n",
            "4  case stuck interim state please check move ter...  Query Cluster\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.to_excel('clustered_data_with_labels.xlsx', index=False, sheet_name='ClusteredData')\n"
      ],
      "metadata": {
        "id": "HRB3zU16JLb2"
      },
      "execution_count": 31,
      "outputs": []
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}